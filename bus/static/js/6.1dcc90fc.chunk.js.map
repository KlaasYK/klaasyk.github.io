{"version":3,"sources":["shared/deck.ts","pages/host.page.tsx","components/card.component.tsx"],"names":["CARDS","State","useStyles","makeStyles","theme","marginFix","marginLeft","spacing","marginRight","active","backgroundColor","tac","textAlign","cardColumn","display","flexDirection","alignItems","HostPage","props","classes","useState","deck","off","players","name","cards","state","CREATING","setState","setName","useEffect","handleKey","ev","code","console","log","window","addEventListener","removeEventListener","Grid","container","direction","item","className","map","p","idx","key","xs","c","card","open","onClick","TextField","label","value","onChange","evt","currentTarget","Button","copy","slice","push","color","fullWidth","numDecks","Math","ceil","length","i","a","j","floor","random","shuffle","SHARING","variant","newState","cloneDeep","pop","needCards","find","PYRAMID","root","justifyContent","background","palette","paper","width","height","borderStyle","borderRadius","borderWidth","margin","closed","borderColor","red","black","CardComponent","split","suit","Icon","clsx"],"mappings":"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","file":"static/js/6.1dcc90fc.chunk.js","sourcesContent":["\n/**\n * List of all cards\n */\nconst CARDS = [\n  'c2',\n  'c3',\n  'c4',\n  'c5',\n  'c6',\n  'c7',\n  'c8',\n  'c9',\n  'c10',\n  'cJ',\n  'cQ',\n  'cK',\n  'cA',\n  'd2',\n  'd3',\n  'd4',\n  'd5',\n  'd6',\n  'd7',\n  'd8',\n  'd9',\n  'd10',\n  'dJ',\n  'dQ',\n  'dK',\n  'dA',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'h7',\n  'h8',\n  'h9',\n  'h10',\n  'hJ',\n  'hQ',\n  'hK',\n  'hA',\n  's2',\n  's3',\n  's4',\n  's5',\n  's6',\n  's7',\n  's8',\n  's9',\n  's10',\n  'sJ',\n  'sQ',\n  'sK',\n  'sA',\n]\n\n\nexport function shuffle<T = any>(a: T[]) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nexport function getDeck() {\n  return CARDS.slice();\n}\n","import { Button, Grid, makeStyles, TextField } from '@material-ui/core';\nimport React, { FC, useState, useEffect } from 'react';\nimport Card from '../components/card.component';\nimport { getDeck, shuffle } from '../shared/deck';\nimport { cloneDeep } from 'lodash';\n\nconst useStyles = makeStyles(theme => ({\n  marginFix: {\n    marginLeft: theme.spacing(-2),\n    marginRight: theme.spacing(-2)\n  },\n  active: {\n    backgroundColor: '#666'\n  },\n  tac: {\n    textAlign: 'center'\n  },\n  cardColumn: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n}));\n\ninterface Player {\n  name: string;\n  cards: string[];\n}\n\nenum State {\n  CREATING,\n  SHARING,\n  PYRAMID,\n}\n\nconst HostPage: FC = (props) => {\n\n  const classes = useStyles(props);\n\n  // const code = 'XYZ';\n\n  const [state, setState] = useState({\n    deck: [] as string[],\n    off: [] as string[],\n    players: [{\n      name: 'Test',\n      cards: []\n    }] as Player[],\n    active: 0,\n    state: State.CREATING\n  });\n\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n\n    function handleKey(ev: KeyboardEvent) {\n      if (ev.code === 'KeyD') {\n        console.log(state.deck);\n      }\n    }\n\n    window.addEventListener('keyup', handleKey);\n    return () => {\n      window.removeEventListener('keyup', handleKey)\n    }\n  }, [state]);\n\n  function addPlayer() {\n\n    const copy = state.players.slice();\n    copy.push({\n      name: name,\n      cards: []\n    })\n\n    setState({ ...state, players: copy });\n    setName('');\n  }\n\n  function start() {\n    // Determine the amount of cards needed\n\n    const numDecks = Math.ceil(state.players.length / 9);\n\n    let cards: string[] = [];\n    for (let i = 0; i !== numDecks; ++i) {\n      cards.push(...getDeck());\n    }\n    cards = shuffle(cards);\n    setName('');\n    setState({ ...state, state: State.SHARING, deck: cards });\n    console.log(state);\n  }\n\n  const handleCardClick = (player: string, card: string) => () => {\n\n  }\n\n  /**\n   * Give a card to the current player\n   */\n  function giveCard() {\n    const newState = cloneDeep(state);\n    const card = newState.deck.pop()!;\n    newState.players[newState.active].cards.push(card);\n    newState.active = (newState.active + 1) % newState.players.length;\n    // Check if everyone has cards\n    const needCards = newState.players.find(p => p.cards.length !== 4);\n    newState.state = needCards ? State.SHARING : State.PYRAMID;\n    setState(newState)\n  }\n\n  return (\n    <Grid container direction=\"column\">\n      <Grid item className={classes.tac}>\n        <h1>KBUS</h1>\n      </Grid>\n\n      <Grid item container direction=\"row\">\n\n        {\n          state.players.map((p, idx) => {\n            return (\n              <Grid item key={p.name} xs={1}>\n                <h3 className={classes.tac}>\n                  {p.name}\n                </h3>\n                {\n                  p.cards.map(c => (\n                    <div key={c} className={classes.cardColumn}>\n                      <Card\n                        card={c}\n                        open={true}\n                        onClick={handleCardClick(p.name, c)}\n                      />\n                    </div>\n                  ))\n                }\n              </Grid>\n            )\n          })\n        }\n\n\n\n\n        {\n          state.state === State.CREATING &&\n          (\n            <Grid item xs={2}>\n              <div>\n                <TextField\n                  label=\"Naam\"\n                  value={name}\n                  onChange={evt => setName(evt.currentTarget.value)}\n                />\n              </div>\n              <Button\n                onClick={addPlayer}\n                color=\"primary\"\n                fullWidth\n              >\n                voeg toe\n          </Button>\n\n              <Button\n                onClick={start}\n                color=\"primary\"\n                fullWidth\n              >\n                start spel\n              </Button>\n            </Grid>\n          )\n        }\n      </Grid>\n\n      {\n        state.state === State.SHARING &&\n        (\n          <Grid item className={classes.cardColumn}>\n            <div>\n              {state.deck.length} kaarten\n              </div>\n\n            <div>\n              <Card card=\"hA\" open={false} />\n            </div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={giveCard}\n            >\n              deel kaart\n            </Button>\n          </Grid>\n\n        )\n      }\n    </Grid>\n  )\n}\n\nexport default HostPage;\n","import React, { FC } from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport clsx from 'clsx'\n\ninterface Props {\n  open: boolean;\n  card: string;\n  onClick?: () => void;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    background: theme.palette.background.paper,\n    width: theme.spacing(6),\n    height: theme.spacing(8),\n    borderStyle: 'solid',\n    borderRadius: theme.spacing(1),\n    borderWidth: 2,\n    margin: `${theme.spacing(1)}px ${theme.spacing(2)}px`\n  },\n  closed: {\n    borderColor: ' #4a235a ',\n    backgroundColor: '#7d3c98',\n    color: '#fff '\n  },\n  red: {\n    borderColor: '#F00',\n    color: '#F00'\n  },\n  black: {\n    borderColor: '#000',\n    color: '#000'\n  }\n}));\n\n/**\n * Card components\n *\n * @param props\n */\nconst CardComponent: FC<Props> = (props) => {\n  const { open, card, onClick } = props;\n  const classes = useStyles(props);\n\n  const [suit, value] = card.split('', 2);\n\n  let Icon = <>&#8466;</>;\n\n  switch (suit) {\n    case 'c':\n      Icon = <>&clubs;</>;\n      break;\n    case 'd':\n      Icon = <>&diams;</>;\n      break;\n    case 'h':\n      Icon = <>&hearts;</>;\n      break;\n    case 's':\n      Icon = <>&spades;</>;\n      break;\n    default:\n      Icon = <>?</>;\n  }\n\n  const red = suit === 'h' || suit === 'd';\n\n  return (\n    <div\n      className={clsx(classes.root, open && red && classes.red, open && !red && classes.black, !open && classes.closed)}\n      onClick={onClick}\n    >\n      {\n        open ?\n          (\n            <span>{Icon} {value}</span>\n          ) : (\n            <span>&#8466;</span>\n          )\n      }\n    </div>\n  )\n}\n\nexport default CardComponent;\n"],"sourceRoot":""}