{"version":3,"sources":["components/card.component.tsx","shared/deck.ts","pages/host.page.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","alignItems","background","palette","paper","width","spacing","height","borderStyle","borderRadius","borderWidth","margin","closed","borderColor","backgroundColor","color","red","black","CardComponent","props","open","card","onClick","classes","split","suit","value","Icon","className","clsx","CARDS","State","marginFix","marginLeft","marginRight","active","tac","textAlign","cardColumn","flexDirection","HostPage","useState","deck","off","players","name","cards","state","CREATING","setState","setName","useEffect","handleKey","ev","code","console","log","window","addEventListener","removeEventListener","Grid","container","direction","item","map","p","idx","key","xs","c","TextField","label","onChange","evt","currentTarget","Button","copy","slice","push","fullWidth","numDecks","Math","ceil","length","i","a","j","floor","random","shuffle","SHARING","variant","newState","cloneDeep","pop","needCards","find","PYRAMID","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84127df7.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport clsx from 'clsx'\n\ninterface Props {\n  open: boolean;\n  card: string;\n  onClick?: () => void;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    background: theme.palette.background.paper,\n    width: theme.spacing(6),\n    height: theme.spacing(8),\n    borderStyle: 'solid',\n    borderRadius: theme.spacing(1),\n    borderWidth: 2,\n    margin: `${theme.spacing(1)}px ${theme.spacing(2)}px`\n  },\n  closed: {\n    borderColor: ' #4a235a ',\n    backgroundColor: '#7d3c98',\n    color: '#fff '\n  },\n  red: {\n    borderColor: '#F00',\n    color: '#F00'\n  },\n  black: {\n    borderColor: '#000',\n    color: '#000'\n  }\n}));\n\n/**\n * Card components\n *\n * @param props\n */\nconst CardComponent: FC<Props> = (props) => {\n  const { open, card, onClick } = props;\n  const classes = useStyles(props);\n\n  const [suit, value] = card.split('', 2);\n\n  let Icon = <>&#8466;</>;\n\n  switch (suit) {\n    case 'c':\n      Icon = <>&clubs;</>;\n      break;\n    case 'd':\n      Icon = <>&diams;</>;\n      break;\n    case 'h':\n      Icon = <>&hearts;</>;\n      break;\n    case 's':\n      Icon = <>&spades;</>;\n      break;\n    default:\n      Icon = <>?</>;\n  }\n\n  const red = suit === 'h' || suit === 'd';\n\n  return (\n    <div\n      className={clsx(classes.root, open && red && classes.red, open && !red && classes.black, !open && classes.closed)}\n      onClick={onClick}\n    >\n      {\n        open ?\n          (\n            <span>{Icon} {value}</span>\n          ) : (\n            <span>&#8466;</span>\n          )\n      }\n    </div>\n  )\n}\n\nexport default CardComponent;\n","\n/**\n * List of all cards\n */\nconst CARDS = [\n  'c2',\n  'c3',\n  'c4',\n  'c5',\n  'c6',\n  'c7',\n  'c8',\n  'c9',\n  'c10',\n  'cJ',\n  'cQ',\n  'cK',\n  'cA',\n  'd2',\n  'd3',\n  'd4',\n  'd5',\n  'd6',\n  'd7',\n  'd8',\n  'd9',\n  'd10',\n  'dJ',\n  'dQ',\n  'dK',\n  'dA',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'h7',\n  'h8',\n  'h9',\n  'h10',\n  'hJ',\n  'hQ',\n  'hK',\n  'hA',\n  's2',\n  's3',\n  's4',\n  's5',\n  's6',\n  's7',\n  's8',\n  's9',\n  's10',\n  'sJ',\n  'sQ',\n  'sK',\n  'sA',\n]\n\n\nexport function shuffle<T = any>(a: T[]) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nexport function getDeck() {\n  return CARDS.slice();\n}\n","import { Button, Grid, makeStyles, TextField } from '@material-ui/core';\nimport React, { FC, useState, useEffect } from 'react';\nimport Card from '../components/card.component';\nimport { getDeck, shuffle } from '../shared/deck';\nimport { cloneDeep } from 'lodash';\n\nconst useStyles = makeStyles(theme => ({\n  marginFix: {\n    marginLeft: theme.spacing(-2),\n    marginRight: theme.spacing(-2)\n  },\n  active: {\n    backgroundColor: '#666'\n  },\n  tac: {\n    textAlign: 'center'\n  },\n  cardColumn: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n}));\n\ninterface Player {\n  name: string;\n  cards: string[];\n}\n\nenum State {\n  CREATING,\n  SHARING,\n  PYRAMID,\n}\n\nconst HostPage: FC = (props) => {\n\n  const classes = useStyles(props);\n\n  // const code = 'XYZ';\n\n  const [state, setState] = useState({\n    deck: [] as string[],\n    off: [] as string[],\n    players: [{\n      name: 'Test',\n      cards: []\n    }] as Player[],\n    active: 0,\n    state: State.CREATING\n  });\n\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n\n    function handleKey(ev: KeyboardEvent) {\n      if (ev.code === 'KeyD') {\n        console.log(state.deck);\n      }\n    }\n\n    window.addEventListener('keyup', handleKey);\n    return () => {\n      window.removeEventListener('keyup', handleKey)\n    }\n  }, [state]);\n\n  function addPlayer() {\n\n    const copy = state.players.slice();\n    copy.push({\n      name: name,\n      cards: []\n    })\n\n    setState({ ...state, players: copy });\n    setName('');\n  }\n\n  function start() {\n    // Determine the amount of cards needed\n\n    const numDecks = Math.ceil(state.players.length / 9);\n\n    let cards: string[] = [];\n    for (let i = 0; i !== numDecks; ++i) {\n      cards.push(...getDeck());\n    }\n    cards = shuffle(cards);\n    setName('');\n    setState({ ...state, state: State.SHARING, deck: cards });\n    console.log(state);\n  }\n\n  const handleCardClick = (player: string, card: string) => () => {\n\n  }\n\n  /**\n   * Give a card to the current player\n   */\n  function giveCard() {\n    const newState = cloneDeep(state);\n    const card = newState.deck.pop()!;\n    newState.players[newState.active].cards.push(card);\n    newState.active = (newState.active + 1) % newState.players.length;\n    // Check if everyone has cards\n    const needCards = newState.players.find(p => p.cards.length !== 4);\n    newState.state = needCards ? State.SHARING : State.PYRAMID;\n    setState(newState)\n  }\n\n  return (\n    <Grid container direction=\"column\">\n      <Grid item className={classes.tac}>\n        <h1>KBUS</h1>\n      </Grid>\n\n      <Grid item container direction=\"row\">\n\n        {\n          state.players.map((p, idx) => {\n            return (\n              <Grid item key={p.name} xs={1}>\n                <h3 className={classes.tac}>\n                  {p.name}\n                </h3>\n                {\n                  p.cards.map(c => (\n                    <div key={c} className={classes.cardColumn}>\n                      <Card\n                        card={c}\n                        open={true}\n                        onClick={handleCardClick(p.name, c)}\n                      />\n                    </div>\n                  ))\n                }\n              </Grid>\n            )\n          })\n        }\n\n\n\n\n        {\n          state.state === State.CREATING &&\n          (\n            <Grid item xs={2}>\n              <div>\n                <TextField\n                  label=\"Naam\"\n                  value={name}\n                  onChange={evt => setName(evt.currentTarget.value)}\n                />\n              </div>\n              <Button\n                onClick={addPlayer}\n                color=\"primary\"\n                fullWidth\n              >\n                voeg toe\n          </Button>\n\n              <Button\n                onClick={start}\n                color=\"primary\"\n                fullWidth\n              >\n                start spel\n              </Button>\n            </Grid>\n          )\n        }\n      </Grid>\n\n      {\n        state.state === State.SHARING &&\n        (\n          <Grid item className={classes.cardColumn}>\n            <div>\n              {state.deck.length} kaarten\n              </div>\n\n            <div>\n              <Card card=\"hA\" open={false} />\n            </div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={giveCard}\n            >\n              deel kaart\n            </Button>\n          </Grid>\n\n        )\n      }\n    </Grid>\n  )\n}\n\nexport default HostPage;\n","import CssBaseLine from '@material-ui/core/CssBaseline';\nimport React, { FC } from 'react';\nimport HostPage from './pages/host.page';\n\nconst App: FC = (props) => {\n\n  return (\n    <>\n      <CssBaseLine />\n      <HostPage />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}