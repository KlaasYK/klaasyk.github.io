{"version":3,"sources":["components/loading.component.tsx","pages/main.page.tsx","routes.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","props","Main","path","history","useHistory","Grid","container","alignItems","justify","direction","spacing","item","Button","onClick","push","variant","HostPage","lazy","ClientPage","Routes","basename","fallback","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAOeA,EANK,SAACC,GACnB,OACE,0C,iCCoCWC,EAlCE,SAACD,GAEhB,IAEcE,EAFRC,EAAUC,cAMhB,OACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,WAAW,SACXC,QAAQ,SACRC,UAAU,SACVC,QAAS,GAET,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAdAX,EAcc,QAdG,WAC7BC,EAAQW,KAAKZ,KAauBa,QAAQ,aAAxC,qBClBFC,EAAWC,gBAAK,kBAAM,8DACtBC,EAAaD,gBAAK,kBAAM,uDAsBfE,EApBI,SAACnB,GAClB,OACE,kBAAC,IAAD,CAAQoB,SAAS,QACf,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOnB,KAAK,SACV,kBAACc,EAAD,OAEF,kBAAC,IAAD,CAAOd,KAAK,WACV,kBAACgB,EAAD,OAEF,kBAAC,IAAD,CAAOhB,KAAK,KACV,kBAAC,EAAD,WCNGoB,EAVC,SAACtB,GAEf,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,EAAD,QCGcuB,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6899c26.chunk.js","sourcesContent":["import React, { FC } from 'react';\nconst Loading: FC = (props) => {\n  return (\n    <span>Loading</span>\n  );\n}\n\nexport default Loading;\n","import { Button, Grid } from '@material-ui/core';\nimport TvIcon from '@material-ui/icons/Tv';\nimport React, { FC } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst Main: FC = (props) => {\n\n  const history = useHistory();\n\n  const goto = (path: string) => () => {\n    history.push(path);\n  }\n\n  return (\n    <Grid\n      container\n      alignItems=\"center\"\n      justify=\"center\"\n      direction=\"column\"\n      spacing={2}\n    >\n      <Grid item>\n        <TvIcon />\n        <Button onClick={goto('/host')} variant=\"contained\">\n          start een spel\n        </Button>\n      </Grid>\n\n      {/* <Grid item>\n        <PhoneAndroidIcon />\n        <Button onClick={goto('/client')} variant=\"contained\">\n          doe mee met een spel\n        </Button>\n      </Grid> */}\n\n    </Grid>\n  )\n}\n\nexport default Main;\n","import React, { FC, lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Loading from './components/loading.component';\nimport Main from './pages/main.page';\n\nconst HostPage = lazy(() => import('./pages/host.page'));\nconst ClientPage = lazy(() => import('./pages/client.page'));\n\nconst Routes: FC = (props) => {\n  return (\n    <Router basename=\"/bus\">\n      <Suspense fallback={<Loading />}>\n        <Switch>\n          <Route path=\"/host\">\n            <HostPage />\n          </Route>\n          <Route path=\"/client\">\n            <ClientPage />\n          </Route>\n          <Route path=\"/\">\n            <Main />\n          </Route>\n        </Switch>\n      </Suspense >\n    </Router >\n  )\n}\n\nexport default Routes;\n","import CssBaseLine from '@material-ui/core/CssBaseline';\nimport React, { FC } from 'react';\nimport Routes from './routes';\n\nconst App: FC = (props) => {\n\n  return (\n    <>\n      <CssBaseLine />\n      <Routes />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}